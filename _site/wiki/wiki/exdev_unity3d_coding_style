<!doctype html>
<!--[if lt IE 7]><html class="no-js lt-ie9 lt-ie8 lt-ie7" lang="en"> <![endif]-->
<!--[if (IE 7)&!(IEMobile)]><html class="no-js lt-ie9 lt-ie8" lang="en"><![endif]-->
<!--[if (IE 8)&!(IEMobile)]><html class="no-js lt-ie9" lang="en"><![endif]-->
<!--[if gt IE 8]><!--> <html class="no-js" lang="en"><!--<![endif]-->
<head>
<meta charset="utf-8">
<title>Unity3D 编程规范 &#8211; exDev</title>
<meta name="description" content="Game Development Software Provider. Home of ex2D and exVim.">




<!-- Open Graph -->
<meta property="og:locale" content="en_US">
<meta property="og:type" content="article">
<meta property="og:title" content="Unity3D 编程规范">
<meta property="og:description" content="Game Development Software Provider. Home of ex2D and exVim.">
<meta property="og:url" content="/wiki/wiki/exdev_unity3d_coding_style">
<meta property="og:site_name" content="exDev">





<link rel="canonical" href="/wiki/wiki/exdev_unity3d_coding_style">
<link href="/feed.xml" type="application/atom+xml" rel="alternate" title="exDev Feed">


<!-- http://t.co/dKP3o1e -->
<meta name="HandheldFriendly" content="True">
<meta name="MobileOptimized" content="320">
<meta name="viewport" content="width=device-width, initial-scale=1.0">

<!-- For all browsers -->
<link rel="stylesheet" href="/assets/css/main.css">
<!-- Webfonts -->
<script src="//use.edgefonts.net/source-sans-pro:n2,i2,n3,i3,n4,i4,n6,i6,n7,i7,n9,i9;source-code-pro:n4,n7;volkhov.js"></script>

<meta http-equiv="cleartype" content="on">

<!-- Load Modernizr -->
<script src="/assets/js/vendor/modernizr-2.6.2.custom.min.js"></script>

<!-- Icons -->
<!-- 16x16 -->
<link rel="shortcut icon" href="/favicon.ico">
<!-- 32x32 -->
<link rel="shortcut icon" href="/favicon.png">
<!-- 57x57 (precomposed) for iPhone 3GS, pre-2011 iPod Touch and older Android devices -->
<link rel="apple-touch-icon-precomposed" href="/images/apple-touch-icon-precomposed.png">
<!-- 72x72 (precomposed) for 1st generation iPad, iPad 2 and iPad mini -->
<link rel="apple-touch-icon-precomposed" sizes="72x72" href="/images/apple-touch-icon-72x72-precomposed.png">
<!-- 114x114 (precomposed) for iPhone 4, 4S, 5 and post-2011 iPod Touch -->
<link rel="apple-touch-icon-precomposed" sizes="114x114" href="/images/apple-touch-icon-114x114-precomposed.png">
<!-- 144x144 (precomposed) for iPad 3rd and 4th generation -->
<link rel="apple-touch-icon-precomposed" sizes="144x144" href="/images/apple-touch-icon-144x144-precomposed.png">

</head>

<body id="page" itemscope itemtype="http://schema.org/WebPage">

<!--[if lt IE 9]><div class="upgrade"><strong><a href="http://whatbrowser.org/">Your browser is quite old!</strong> Why not upgrade to a different browser to better enjoy this site?</a></div><![endif]-->
<div class="navigation-wrapper">
	<nav role="navigation" id="site-nav" class="animated drop" itemscope itemtype="http://schema.org/SiteNavigationElement">
	    <ul>
	        
			<li>
				
					<a href="/">Home</a>
				 
			</li>
	        
			<li>
				
					<a href="/store">Store</a>
				 
			</li>
	        
			<li>
				
					<a href="/ex2d">ex2D</a>
				 
			</li>
	        
			<li>
				
					<a href="/exvim">exVim</a>
				 
			</li>
	        
			<li>
				
					<a href="/wiki">Wiki</a>
				 
			</li>
	        
			<li>
				
					<a href="http://abitgames.com">aBit Games</a>
				 
			</li>
	        
	        <li><a href="/feed.xml" title="Atom/RSS feed"><i class="icon-rss"></i> Feed</a>
	    </ul>
	</nav>
</div><!-- /.navigation-wrapper -->

<header class="masthead" itemscope itemtype="http://schema.org/Organization">
	<div class="wrap">
		<a href="" class="site-logo" rel="home" title="exDev" itemprop="url"><img src="/images/site-logo.png" width="200" height="200" alt="exDev logo" class="animated fadeInUp" itemprop="logo"></a>
        <!-- <h1 class="site-title animated fadeIn"><a href="">exDev</a></h1> -->
		<h2 class="site-description animated fadeIn" itemprop="description">Game Development Software Provider. Home of ex2D and exVim.</h2>
	</div>
</header><!-- /.masthead -->


<div id="main" role="main" itemprop="mainContentOfPage">
  <article class="entry" itemscope itemtype="http://schema.org/ItemPage">
    
    <div class="entry-wrapper">
      <header class="entry-header">
        <h1 class="entry-title" itemprop="name">Unity3D 编程规范</h1>
      </header>
      <div class="entry-content" itemprop="description">
        <h2 id="section">概括</h2>

<p>以 FooBar 这个单词为例，我们简单概括:</p>

<ul>
  <li>变量小写字母起头: <code>bool fooBar = false;</code></li>
  <li>函数大写字母起头: <code>void FooBar ();</code></li>
  <li>函数参数加以 <code>_</code> + 小写字母起头: <code>void MyFunction ( int _fooBar );</code></li>
  <li>public, private, protected, internal 写最前面</li>
  <li>static, const, virtual, override 放中间, 多个混合顺序随意</li>
  <li>Serialize 和 NonSerialize 的属性分段定义</li>
  <li>内嵌Class, Enum 的定义放最上方, 接着是 static 变量, 接着是 Serialized 变量, 接着是 Non-Serialized 变量, 接着是 static 函数, 最后是其他函数.</li>
</ul>

<h3 id="section-1">1) 变量定义</h3>

<p>Unity3D 中变量的定义和 Inspector 显示以及 Serialize 挂钩。所以在定义中我们 <strong>不采用</strong> 匈牙利命名规则(m<em>, s</em>, g_)，而是直接以变量名的小写字母起头进行定义。</p>

<p>以 FooBar 为例，定义如下:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">fooBar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</code></pre></div>

<p>或者</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">foobar</span> <span class="p">=</span> <span class="k">false</span><span class="p">;</span>
</code></pre></div>

<p>有时候我们会做出带 get, set 函数的属性定义，并带有 serialize 字段，这种情况下我们建议在变量末尾加 <code>_</code></p>

<p>定义方法如下:</p>

<div class="highlight"><pre><code class="csharp"><span class="na">[SerializeField]</span> <span class="k">protected</span> <span class="kt">int</span> <span class="n">fooBar_</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span> 
<span class="k">public</span> <span class="kt">int</span> <span class="n">fooBar</span> <span class="p">{</span> 
 <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">fooBar_</span><span class="p">;</span> <span class="p">}</span> 
 <span class="k">set</span> <span class="p">{</span> <span class="k">if</span> <span class="p">(</span> <span class="n">fooBar_</span> <span class="p">!=</span> <span class="k">value</span> <span class="p">)</span> <span class="p">{</span> <span class="n">fooBar_</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">Log</span><span class="p">(</span><span class="s">&quot;fooBar changed&quot;</span><span class="p">);</span> <span class="p">}</span> <span class="p">}</span> 
<span class="p">}</span>
</code></pre></div>

<h3 id="section-2">2) 函数定义</h3>

<p>函数定义统一以大写字母起头，如一个名为FooBar的函数，定义为：</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">FooBar</span> <span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div>

<p>函数中的参数，以 <code>_</code> + 小写字母起头参数定义。如参数名 “Do Update” 将定义为:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">FooBar</span> <span class="p">(</span> <span class="kt">bool</span> <span class="n">_doUpdate</span> <span class="p">)</span> <span class="p">{</span> <span class="p">....</span> <span class="p">}</span>
</code></pre></div>

<p>这样做可以避免掉参数和成员变量重名的问题，也方便代码阅读，明确哪些是外部参数</p>

<h3 id="section-3">3) 修饰符定义</h3>

<p>修饰符分两批</p>

<p>存取修饰符: public, protected, private, internal
其他修饰符: static, const, virtual, override, readonly … 等
存取修饰符在定义是放在最前面，其他修饰符在存取修饰符之后。如:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">fooBar</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="k">protected</span> <span class="k">void</span> <span class="n">FooBar</span> <span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div>

<h3 id="section-4">4) 大括号{}的书写位置</h3>

<p>我们对 <code>{</code>, <code>}</code> 的书写定义没有强制要求，根据个人编程习惯来书写，有的人习惯写:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">int</span> <span class="n">fooBar</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="k">protected</span> <span class="k">void</span> <span class="n">FooBar</span> <span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="k">if</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> <span class="p">{</span> 
    <span class="p">...</span> 
<span class="p">}</span>
</code></pre></div>

<p>而也有喜欢书写:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">if</span> <span class="p">(</span> <span class="p">...</span> <span class="p">)</span> 
<span class="p">{</span> 
    <span class="p">...</span> 
<span class="p">}</span>
</code></pre></div>

<p>这都是可行的。但是我们推荐第一种紧凑型的写法，这是 Unix 的 C 书写标准，而且使得代码紧凑美观。</p>

<h3 id="section-5">5) 空格符的书写</h3>

<p>定义函数时，以下几种书写习惯都是可行的:</p>

<div class="highlight"><pre><code class="csharp"><span class="k">void</span> <span class="nf">MyFunction</span> <span class="p">(</span> <span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_c</span> <span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span> 

<span class="k">void</span> <span class="nf">MyFunction</span><span class="p">(</span><span class="kt">int</span> <span class="n">_a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_b</span><span class="p">,</span> <span class="kt">int</span> <span class="n">_c</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
</code></pre></div>

<p>定义变量时，必须在 <code>=</code> 两边各空出一格以上</p>

<div class="highlight"><pre><code class="csharp"><span class="kt">int</span> <span class="n">foobar</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</code></pre></div>

<h3 id="section-6">6) 定义顺序</h3>

<p>定义顺序虽然没有强制要求，但是推荐按照以下顺序定义:</p>

<ul>
  <li>内嵌结构如 struct, enum 和 class</li>
  <li>静态变量</li>
  <li>public 或 serialized 变量</li>
  <li>private 或 non-serialized 变量</li>
  <li>静态函数</li>
  <li>Builtin 函数的重写 ( 所谓 Builtin 函数重写，是指继承自 Unity3D 的类中的可用函数，如 Start, Update, OnEnable 等)</li>
  <li>自定义的 public 函数</li>
  <li>自定义的 private, protected 函数</li>
</ul>

<h3 id="section-7">7) 间隔符</h3>

<p>每份代码的开头处请放置(注: 86个<code>=</code>):</p>

<div class="highlight"><pre><code class="csharp"><span class="c1">// ======================================================================================</span>
<span class="c1">// File         : FileName.cs</span>
<span class="c1">// Author       : Your Name </span>
<span class="c1">// Last Change  : 07/24/2012 | 14:10:05 PM | Tuesday,July (这里不做强制要求)</span>
<span class="c1">// Description  : </span>
<span class="c1">// ======================================================================================</span>
</code></pre></div>

<p>在所有的using namespace 声明前请放置 (注: 79个<code>/</code>):</p>

<div class="highlight"><pre><code class="csharp"><span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
<span class="c1">// usings</span>
<span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
</code></pre></div>

<p>在一个 class 定义的上方请放置 (注: 79个<code>/</code>):</p>

<div class="highlight"><pre><code class="csharp"><span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
<span class="c1">///</span>
<span class="c1">/// class 的定义说明</span>
<span class="c1">///</span>
<span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
</code></pre></div>

<p>在函数定义 或 property 定义的上方，请用分割说明 (注: 79个<code>/</code>)</p>

<div class="highlight"><pre><code class="csharp"><span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
<span class="c1">// functions 或 properties</span>
<span class="c1">///////////////////////////////////////////////////////////////////////////////</span>
</code></pre></div>

<p>每个函数的上方请放置 (注:66个<code>-</code>)</p>

<div class="highlight"><pre><code class="csharp"><span class="c1">// ------------------------------------------------------------------ </span>
<span class="c1">// Desc: </span>
<span class="c1">// ------------------------------------------------------------------ </span>
</code></pre></div>

<p>每个分隔注释的上方和下方都必须空出一行后方可书写代码</p>

      </div><!-- /.entry-content -->
    </div><!-- /.entry-wrapper -->
  </article>
</div><!-- /#main -->

<div class="footer-wrapper">
  <footer role="contentinfo">
    <span>&copy; 2013 exDev. Powered by <a href="http://jekyllrb.com">Jekyll</a> using the <a href="http://mademistakes.com/">So Simple Theme</a>.</span>
<div class="social-icons">
	
	
	
	
	
	
	
	
	
</div><!-- /.social-icons -->
  </footer>
</div><!-- /.footer-wrapper -->

<script src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>
<script>window.jQuery || document.write('<script src="/assets/js/vendor/jquery-1.9.1.min.js"><\/script>')</script>
<script src="/assets/js/main.min.js"></script>

<!-- Asynchronous Google Analytics snippet -->
<script>
  var _gaq = _gaq || [];
  var pluginUrl = 
 '//www.google-analytics.com/plugins/ga/inpage_linkid.js';
  _gaq.push(['_require', 'inpage_linkid', pluginUrl]);
  _gaq.push(['_setAccount', 'UA-8694664-4']);
  _gaq.push(['_trackPageview']);

  (function() {
    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
  })();
</script>

          

</body>
</html>